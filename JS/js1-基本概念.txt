1、对大小写敏感，即区分大小写
2、语句以 ; 结尾
3、变量命名：第一个字符必须是字母、下划线、$，然后第一个字母小写，其他每个单词首字母大写
4、数据类型：Undefined、Null、Boolean、Number、String和Object
5、typeof操作符：对一个值使用typeof操作符返回这个值的数据类型的字符串【一般用于检测基本值的类型】
                1> 如果这个值是布尔值，返回字符串boolean    alert(typeof true)   返回boolean
				2> 如果这个值是数值，返回字符串number       alert(typeof 1)      返回number    注意：alert(typeof NaN) 返回number
				3> 如果这个值是字符串，返回字符串string     alert(typeof "3a")   返回string
				4> 如果这个值是对象或者null，返回字符串object   alert(typeof null) 返回object
                5> 如果这个值只声明未初始化，返回字符串undefined；特殊点：对未声明的变量使用typeof也返回undefined   alert(typeof undefined) 返回undefined								
6、Undefined：这个类型只有一个值，即undefined。在使用var声明变量但未对其加以初始化时，这个变量的值就是undefined
7、Null：这个类型只有一个值，即null。类似于c#中的null，就是空对象指针。主要用来初始化将来准备保存对象的变量；特殊点：alert(null==undefined),等效于alert(false==false) 返回true
8、Boolean：这个类型有两个值，即true和false。
              1> Boolean(value)：类型转换函数。 一个参数[任意类型]，表示待转换的值，返回true/false；js中所有类型的值都有一个与之等价的boolean值，通过Boolean()函数可以将一个值转化成对应的boolean值。
              2> 如果参数是Boolean类型的值，那么true返回true，false返回false
			  3> 如果参数是Number类型的值，那么任何非零数值返回true，0和NaN返回false     
			  4> 如果参数是String类型的值，那么任何非空字符返回true，""(空字符串)返回false
			  5> 如果参数是Object类型的值，那么任何对象返回true，null返回false
			  6> 如果参数是undefined，那么返回false 
9、Number：注意：在算术运算中，所有以8进制和16进制表示的数值最终都将被转换成十进制数值。
              1> 8进制表示法：0+(0-7)          010     转换成10进制  8
			  2> 16进制表示法：0x+(0-F)        010     转换成10进制  16
			  3> NaN: Not a Number,是一个特殊的数值。这个数值用于表示一个本来要返回数值的操作数未返回数值的情况(避免报错) 例子：alert(0/0)
			     特殊：NaN与任何值都不相等，包括NaN本身；任何涉及NaN的操作都返回NaN，所以要判断一个值是否是NaN，不能用==或===，必须用isNaN()
		      4> isNaN(Number number): 一个参数[任意类型]，表示待检测的值，返回true/false；通过isNaN()函数可以判断参数是否 “不是数值”。  
			                           原理：先对传入的参数进行判断，如果是非number类型则对其调用Number()，然后再判断这个函数的返回值是否是isNaN
									   例子：isNaN(true)      返回false、isNaN(false) 返回false 【参考Number()原理】
									         isNaN(2)         返回false 、isNaN(NaN)  返回true
									         isNaN("ab")      返回true、 isNaN("23")  返回false 、isNaN("") 返回false 【参考Number()原理】											 
											 isNaN(null)      返回false 【参考Number()原理】
											 isNaN(undefined) 返回true 【参考Number()原理】
			  5> Number(value)：类型转换函数。一个参数[任意类型]，表示待转换的值，返回NaN或一个数值；通过Number(value)函数可以把非数值转换为数值
			                    1、如果参数是Boolean类型的值，那么Number(true)返回1     Number(false) 返回0
								2、如果参数是Number类型的值，那么只是简单的传入和传出   Number(NaN)   返回NaN
								3、如果参数是String类型的值，那么1>如果字符串中只包含数字，则将其转换成十进制数值   alert(Number("123")); 返回123、alert(Number("012")) 返回12
								                                 2>如果字符串中包含有效的十六进制格式，则将其转换为相等的十进制数值   alert(Number("0x10"));  返回16
																 3>如果字符串是空的，则将其转换为0   alert(Number(""))  返回0
																 4>如果字符串包含有非数字字符，则将其转换为NaN   alert(Number("2fg")) 返回NaN
                                4、如果参数是null，那么返回0
								5、如果参数是undefined，那么返回NaN
			  6> parseInt(String string [Number radix]): 2个参数，第一个是待转换的字符串，第二个是按几进制解析[可选]。通过parseInt(String string [Number radix])函数可以把非数值转换为整数数值
			                                            转换原理：先对传入的第一个参数进行判断，如果是非string类型则对其调用String()，然后对这个函数的返回的字符串进行如下解析：
														忽略字符串前的空格，直到找个第一个非空字符，如果第一个字符不是数字字符或者负号，则返回NaN；
														如果第一个字符是数字字符，继续解析第二个字符，直到解析完所有字符或者遇到了一个非数字字符。
							 例子：alert(parseInt(true))      返回NaN 【参考String()原理】
							       alert(parseInt(10))        返回10  【参考String()原理】
								   alert(parseInt(10,2))      返回2  【参考String()原理】
								   alert(parseInt(10,8))      返回8  【参考String()原理】
								   alert(parseInt(10,16))     返回16 【参考String()原理】
								   alert(parseInt(10.46))     返回10  【参考String()原理】
								   alert(parseInt(0.59))      返回0   【参考String()原理】
								   alert(parseInt("10"))      返回10
								   alert(parseInt("10", 2))   返回2
								   alert(parseInt("10", 8))   返回8
								   alert(parseInt("10", 16))  返回16
								   alert(parseInt("123.5"))   返回123
								   alert(parseInt("123ab"))   返回123 
							       alert(parseInt("b12"))     返回NaN
                                   alert(parseInt(""))        返回NaN
								   alert(parseInt(null))      返回NaN  【参考String()原理】
								   alert(parseInt(undefined)) 返回NaN  【参考String()原理】
		

			  7> parseFloat(String string): 1个参数；转换原理和parseInt()一样
			                 例子：alert(parseFloat("1.0"))     返回1
							       alert(parseFloat("bqe"))     返回NaN
								   alert(parseFloat("12.34ab")) 返回12.34
								   alert(parseFloat("12.3.5.3"))返回12.3
10、String:   可以用单引号或双引号表示
              1>转义字符：\n 换行 \r回车 \xnn以16进制代码nn表示的一个字符，其中n为0-F  \unnnn以16进制代码nnnn表示的一个Unicode字符，其中n为0-F
			                 例子：alert("\x41");               返回A
			  2>length：属性，字符串的长度
			                 例子：alert("ewe".length);         返回3
							       alert("ewe\x41".length);     返回4
								   alert("ewe汉字".length);     返回5
			  3>toString([Number radix]): 1个可选参数，表示转化为几进制的字符串值，通过这个函数可以把一个值转换为字符串值 boolean、number、string和对象类型的值都有
			                              toString()方法，但是null 和 undefined没有。
			                 例子：alert(true.toString());
							       var num = 10;
								   alert(num.toString(2));    返回1010
								   alert(num.toString(8));    返回12
								   alert(num.toString(16));   返回a
								   alert("ab4r".toString());  返回ab4r
              4>String(value)：类型转换函数。一个参数，表示待转换的值，可以把任意类型的值转换成字符串，可以在不知道要转换的值是不是null或undefined的情况下使用。
			                   转换规则：如果值有toString()方法，则调用该方法并返回相应的结果；如果值是null，则返回"null"；如果值是undefined，则返回"undefined"
							 例子：alert(String(null)); 返回null   alert(String(undefined)); 返回undefined
11、Object： 1>一个Object对象实际上是一组数据和功能的集合。 可以通过 var o = new Object() 来创建Object类型的实例。
             2>object类型是所有其他实例的基础，即Object类型拥有的所有属性和方法也同样存在于具体的对象中
			 3>Constructor()：构造函数，保存着用于创建当前对象的函数
			 4>hasOwnProperty(String v)：一个参数，返回true或false。用于检查给定名字的属性在当前实例中是否存在
			 5>isPrototypeOf(v)：一个参数，返回true或false。用于检查传入的对象是否是另一个对象的原型
			 6>propertyIsEnumerable(String v)：一个参数，返回true或false。用于检查给定名字的属性是否可以用语句for-in来遍历
			 7>toLocaleString()：返回对象的字符串表示
			 8>toString()：返回对象的字符串表示
			 9>valueOf()：返回对象的boolean、number、或string值表示。通常和toString()返回的值相同
12、操作符：  【前4个操作数在举例时，其中一个操作数故意用数值，目的是观察第二个操作数在Boolean、Number、String之间的变化】
               1>1元操作符：只能操作一个值的操作符。
			                1、 ++、 --，注意：只能用于变量，他们不仅适用于数值，还可以用于boolean值、string值、对象。但作用于非数值时，操作遵循如下规则：
							    先把操作数转换为数值(即调用Number())，再进行操作；
								例子：var n1=10;          alert(n1++); 返回10
								      var n2=10;          alert(++n2); 返回11
									  var n3=true;        alert(++n3); 返回2
									  var n4=NaN;         alert(++n4); 返回NaN
									  var n5="34";        alert(++n5); 返回35
									  var n6="ed";        alert(++n6); 返回NaN
									  var n7="";          alert(++n7); 返回1
									  var n8=null;        alert(++n8); 返回1
									  var n9=undefined;   alert(++n9); 返回NaN
							 2、+、-
							 3、位操作符
               2>布尔运算符：逻辑与，用&&表示；   逻辑或；用||表示；   逻辑非，用!表示
							 1、 && :逻辑与  可以用于任意类型的值，不一定返回boolean值。属于短路操作，即如果第一个操作数能够决定结果，那么就不会对第二个操作数求值。
								 操作原理如下：先对第一个操作数调用Bealean()方法，如果结果为false，则直接返回该操作数，不会对后面的操作数进行求值；如果结果为true，
								 则判断下一个操作数是否是最后一个操作数，如果是，则返回该操作数；如果不是，则对该操作数调用Bealean()方法，重复这一过程
								 止到遇到结果为false的操作数就停止并返回该操作数。
								例子：  alert("true && 1—返回" + (true && 1));                返回1
										alert("1 && true—返回" + (1 && true));                返回true
										alert("true && 0—返回" + (true && 0));                返回0
										alert("0 && true—返回" + (0 && true));                返回0
										alert("true && NaN—返回" + (true && NaN));            返回NaN
										alert("NaN && true—返回" + (NaN && true));            返回NaN
										alert("true && 'asd'—返回" + (true && "asd"));        返回"asd"
										alert("'asd' && true—返回" + ("asd" && true));        返回true
										alert("true && ''—返回" + (true && ""));              返回""
										alert("'' && true—返回" + ("" && true));              返回""
										alert("true && '123'—返回" + (true && "123"));        返回"123"
										alert("'123' && true—返回" + ("123" && true));        返回true
										alert("true && null—返回" + (true && null));          返回null
										alert("null && true—返回" + (null && true));          返回null
										alert("true && undefined—返回" + (true && undefined));返回undefined
										alert("undefined && true—返回" + (undefined && true));返回undefined
							 2、 || :逻辑或  可以用于任意类型的值，不一定返回boolean值。属于短路操作，即如果第一个操作数能够决定结果，那么就不会对第二个操作数求值。
				 				 操作原理如下：先对第一个操作数调用Bealean()方法，如果结果为true，则直接返回该操作数，不会对后面的操作数进行求值；如果结果为false，
								 则判断下一个操作数是否是最后一个操作数，如果是，则返回该操作数；如果不是，则对该操作数调用Bealean()方法，重复这一过程
								 止到遇到结果为true的操作数就停止并返回该操作数。
								例子：  alert("false || 1—返回" + (false || 1));               返回1
										alert("1 || false—返回" + (1 || false));               返回1
										alert("false || 0—返回" + (false || 0));               返回0
										alert("0 || false—返回" + (0 || false));               返回false
										alert("false || NaN—返回" + (false || NaN));           返回NaN
										alert("NaN || false—返回" + (NaN || false));           返回false
										alert("false || 'asd'—返回" + (false || "asd"));       返回"asd"
										alert("'asd' || false—返回" + ("asd" || false));       返回"asd"
										alert("false || ''—返回" + (false || ""));             返回""
										alert("'' || false—返回" + ("" || false));             返回false
										alert("false || '123'—返回" + (false || "123"));       返回"123"
										alert("'123' || false—返回" + ("123" || false));       返回"123"
										alert("false || null—返回" + (false || null));         返回null
										alert("null || false—返回" + (null || false));         返回false
										alert("false || undefined—返回" + (false || undefined));返回undefined
										alert("undefined || false—返回" + (undefined || false));返回false
							 3、! :逻辑非 可以用于任意类型的值，最终都返回一个boolean值。原理：先Boolean()后求反
								例子：  alert(!true);                                     返回false
										alert("!2—返回" + !2);                           返回false
										alert("!0—返回" + !0);                           返回true
										alert("!NaN—返回" + !NaN);                       返回true
										alert("!'asd'—返回" + !"asd");                   返回false
										alert("!'123'—返回" + !"123");                   返回false
										alert("!''—返回" + !"");                         返回true
										alert("!null—返回" + !null);                     返回true
										alert("!undefined—返回" + !undefined);           返回true
			   3>算术运算符   乘法 用*表示；除法 用/表示；取模(求余数) 用%表示；加法 用+表示；减法 用-表示
		                     1、*可以用于任意类型的值，如果操作数不是数值，则对其调用Number()将其转换成数值，然后再作乘法 
								例子：  alert("2 * true—返回" + (2 * true));             返回2
										alert("2 * false—返回" + (2 * false));           返回0
										alert("2 * 6—返回" + (2 * 6));                   返回12
										alert("2 * NaN—返回" + (2 * NaN));               返回NaN
										alert("2 * 'asd'—返回" + (2 * "asd"));           返回NaN
										alert("2 * '12'—返回" + (2 * "12"));             返回24
										alert("2 * ''—返回" + (2 * ""));                 返回0
										alert("2 * null—返回" + (2 * null));             返回0
										alert("2 * undefined—返回" + (2 * undefined));   返回NaN
							 2、/可以用于任意类型的值，如果操作数不是数值，则对其调用Number()将其转换成数值，然后再作除法 
							 3、%可以用于任意类型的值，如果操作数不是数值，则对其调用Number()将其转换成数值，然后再作除法，取余数 
							 4、+ 可以用于任意类型的值，如果操作数不是数值，但也没有字符串，则对其调用Number()将其转换成数值，然后再作加法；
							      如果有一个操作数是字符串，则取所有操作数的字符串值，并从前到后拼接起来，返回这个新的字符串
							    例子：  alert("2 + true—返回" + (2 + true));                  返回3
										alert("2 + NaN—返回" + (2 + NaN));                    返回NaN
										alert("2 + null—返回" + (2 + null));                  返回2
										alert("2 + undefined—返回" + (2 + undefined));        返回NaN
										alert("'2' + true—返回" + ("2" + true));              返回2true
										alert("'2' + '23'—返回" + ("2" + "23"));              返回223
										alert("'2' + asd—返回" + ("2" + "asd"));              返回2asd
										alert("'2' + null—返回" + ("2" + null));              返回2null
										alert("'2' + undefined—返回" + ("2" + undefined));    返回2undefined
										alert("'2' + NaN—返回" + ("2" + NaN));                返回2NaN
							 5、-可以用于任意类型的值，如果操作数不是数值，则对其调用Number()将其转换成数值，然后再作减法
			                    例子：  alert("2 - true—返回" + (2 - true));             返回1
										alert("2 - false—返回" + (2 - false));           返回2
										alert("2 - 6—返回" + (2 - 6));                   返回-4
										alert("2 - NaN—返回" + (2 - NaN));               返回NaN
										alert("2 - 'asd'—返回" + (2 - "asd"));           返回NaN
										alert("2 - '12'—返回" + (2 - "12"));             返回-10
										alert("2 - ''—返回" + (2 - ""));                 返回2
										alert("2 - null—返回" + (2 - null));             返回2
										alert("2 - undefined—返回" + (2 - undefined));   返回NaN
			   4>关系操作符：>、<、>=、<=  这几个操作符最终都返回boolean值。
			                 规则：1、如果2个操作数都是字符串，则比较这2个字符串首字符的字符编码值
								   2、如果有1个操作数是数字，则将另一个操作数转换成数值，再进行比较
								例子：  alert("2 > true—返回" + (2 > true));             返回true       
										alert("2 > NaN—返回" + (2 > NaN));               返回false
										alert("2 > 'asd'—返回" + (2 > "asd"));           返回false
										alert("2 > '23'—返回" + (2 > "23"));             返回false
										alert("2 > ''—返回" + (2 > ''));                 返回true
										alert("2 > null—返回" + (2 > null));             返回true
										alert("2 > undefined—返回" + (2 > undefined));   返回false
										alert("'3'> '23'—返回" + ('3' > '23'));          返回true												   
			   5>相等操作符：
			                1、  ==和!=    相等和不相等，先转换再比较。
							     2个不同类型操作数规则：1>如果操作数是Boolean、Number、String类型的值，则对其调用Number()，然后再比较
								                        2>在比较前，null和undefined不能被转换，null==undefined
													    3>如果有一个操作数是NaN，则==返回false，!=返回true
					            例子：  alert("true == 1—返回" + (true == 1));                   返回true
										alert("false == 0—返回" + (false == 0));                 返回true
										alert("true == '1'—返回" + (true == "1"));               返回true
										alert("false == ''—返回" + (false == ""));               返回true
										alert("null == undefined—返回" + (null == undefined));   返回true
										alert("NaN == NaN—返回" + (NaN == NaN));                 返回false
							2、  ===和!==  全等和不全等，仅比较不转换。只有在2个操作数未经转换就相等的情况下返回true
							    例子：  alert("55" === 55);      返回false
			   6>三元操作符：语法： boolean_expression ? true_value : false_value  原理：如果boolean_expression值为true，则表达式返回true_value；
			                 否则，表达式返回false_value。
			                    例子：var max = (n1 > n2) ? n1 : n2 ;
			   7>赋值操作符：=     var  变量名 = 值 ；  就是把右边的值赋给左边的变量
			                 +=    复合赋值   var n+=10; 等效于 var n = n +10;
			   总结：遇到操作数的数据类型不一致时，如果是基本类型，解决的办法就是先转换成统一的类型；
			                                       如果是对象，就先调用其valueOf()，看其返回值是否可以转换成数值，
			                                       如果不能，对其返回值调用toString(), 然后继续进行后续动作。js中内置函数和操作符的处理原理
13、流控语句
               1>if(condition)       condition可以是任意表达式，系统会自动对其调用Boolean()
			       {statement1;}     如果condition为true，则执行statement1；
				 else
				   {statement2;}     如果condition为false，则执行statement2；
			   2>do 
			     { statement;}
			     while(expression);
				 注意：1、只有在循环体中的代码执行以后，才会检查出口条件，所以循环体至少被执行一次
				       2、只要expression为true，循环就会继续
					   3、最后面的;不要丢掉
			   3>while(expression)
			     {statement;}
				 注意：1、只要expression为true，循环就会继续
				       2、如果expression为false，则循环体中的代码一次也不会被执行
					   3、一般用在不明确循环次数的情况下
			   4>for(初始化循环变量;循环条件;更新循环变量)
			     {statement;}
				       例子：for(var i = 0; i<10;i++)
					          {alert(i);}
				  注意：for(;;){statement;} 这样写就形成了一个死循环。
			   5>for(var 变量名 in 数组/对象){statement;} 遍历数组或者对象
			     注意：1、遍历数组时，每次执行循环时，都会把数组的索引按由小到大的顺序赋给变量；
				       2、遍历对象时，每次执行循环时，都会把对象的键赋给变量。具体看例子
			   6>break、continue
			     注意：1、break是跳出当前循环，强制执行循环后的语句
				       2、continue是跳出当前循环，继续执行下一次循环
			   7>with(expression){statement;} 这里的with可以理解为对于的意思，主要是为了简化多次操作同一个对象
			           例子：       var s = "asd";
									with (s)
									{
										var len = length;
										var start = indexOf("a");
										alert(len);
										alert(start);
									}
			   8>switch(expression)
			     {  case value1:
				     statement1;
				    break;
					case value2:
					case value3://注意：也可以合并2个case
				     statement2;
				    break;
					default：
					statement2;
				 }
				 注意：1、switch语句的目的就是避免出现这样的语句：
				          if(i==2){}
				          else if(i==3){}
				          else {}
					   2、break的作用是跳出switch语句，在每一个case后加break就是为了避免同时执行多个case代码的情况；
					      如果漏掉break，代码就会继续执行下个case的代码，止到遇到break才跳出。
14、函数：语法 function 函数名(arg1,arg2,..,argn){statement;}
          1>没有签名，即在定义方法时不需要强制规定返回值类型和参数列表。因此js中没有重载，相同名字的函数就是后面的覆盖前面的。
		  2>调用：通过 函数名([arg]) 的方式来调用
		  3>返回值：通过在函数体中使用return语句来返回值，如果没有那么函数在执行完以后返回undefined
          3>arguments: 传参个数和参数类型随意，可以不按照定义进行传参，函数内部可以通过arguments[索引]访问传入的参数，通过
		    arguments.length得到传入参数的个数。这是因为函数接受参数的是一个类似数组的对象—arguments
		    例子： function sum(n1,n2){return n1+n2;}   alert(sum(5,10));                   返回15   
			       function sum2(){return arguments[0]+arguments[1];} alert(sum2(5,10));    返回15   这2个例子是等效的
15、 1>ECMAJavascript中变量有2种数据类型的值：基本类型(即值类型：Boolean、Number、String、null、undefined)和引用类型；
     2>js中所有传参全是值传递；
	 3>instanceof：操作符，专门用于检测引用类型的值的类型。返回true/false   语法：  变量 instanceof constructor
	               typeof在检测基本数据类型的值非常方便，但在检测引用类型的值时总是返回Object；但是对于引用类型的值我们并
				   不满足于知道他是对象，而是想知道他是什么类型的值，所以才有了instanceof。
16、执行环境和作用域：
                1> 执行环境：执行环境是JS中最重要的一个概念；它定义了变量和函数有权访问的边界；分全局和局部2种
				2> 变量对象：每个执行环境都有一个与之关联的变量对象；环境中定义的所有变量和函数都保存在这个对象中；
				3> 全局执行环境：最外围的一个执行环境，根据ECMAScript实现所在的宿主环境不同而不同，在Web浏览器中，全局执行环境被认为是window对象；
				4> 执行环境的销毁：在某个执行环境的所有代码都执行完毕后，环境将被销毁，意味着其中所有变量和函数定义也都随之销毁；全局执行环境的销毁是在网页或浏览器关闭时执行的；
				5> 执行流：每个函数都有自己的执行环境；当执行流进入一个函数时，函数的环境就被推入到一个环境栈中；在函数执行完成，栈会将其环境弹出，再把控制权返还给之前的执行环境；
				6> 作用域链：当代码在环境中执行时，会创建变量对象的一个作用链；作用域链的作用是保证对执行环境有权访问的所有变量和函数的有序访问；
				7> 作用域链的前端：前端，始终都是当前执行代码所在环境的变量对象；
				8> 作用域链的后端：全局执行环境的变量对象始终都是作用域链中的最后一个对象；
				9> 标识符（变量、函数、参数）的解析：是沿着作用域链一级一级地搜索过程；搜索的过程，始终都是从作用域链的前端开始，逐级向后，直到找到标识符为止；搜索到最后一个环境还是找不到的话，就会导致错误发生；
				10>JS没有块级作用域；例子：大括号内的变量在大括号外面也可以访问；for循环中的循环变量i在循环外也可以访问
				11> 变量声明：使用var关键字声明变量的时候，变量将被自动添加到距离最近的可用环境中；不使用var声明的情况下，变量会被直接添加到全局环境中；
17、js具有自动垃圾回收机制，因此开发人员不必关心内存的分配和回收问题。目前常用的策略：标记清除，即当变量进入环境（如在一个函数中声明一个变量），就将这个变量标记为"进入环境"，当变量离开环境时，则将其标记为
    "离开环境"。垃圾收集器在工作时就把这些标记为"离开环境"的变量销毁并回收他们所占用的内存空间。
