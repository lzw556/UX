setup
    webpack webpack-cli
nodejs
    require()
    __dirname(当前目录), path(路径模块), resolve() --参数从右向左拼接一个绝对路径
    commonjs
config
    entry, 指示webpack以那个文件为起点开始打包
        string|array|object
        单入口, chunk名称默认是main, 输出一个bundle
        多入口, chunk名称是key, 每一个chunk输出一个bundle
    output, 指定打包后的资源bundle输出到哪里
        filename, 输出bundle的文件名和路径
        path, 输出资源的公共路径
        publicPath, 所有资源引用时的公共路径前缀, 和输出路径无关
    module, 指定各种loader规则, 让webpack能够处理非js文件, 因为webpack只能处理js
        每一个loader规则语法:
            test, 一般是正则, 表示匹配的文件
            loader, 使用单个loader
            options
            use, 数组, 使用多个loader, 顺序从右向左
            exclude, 排除检查的文件
            include, 只检查的文件
            enforce
                pre, 优先执行
                post, 延后执行
            oneof, 所有规则只会生效一个
    plugins
        html-webpack-plugin
        作用: 在每次构建中自动生成html文件
        clean-webpack-plugin
        作用: 在每次构建中自动清空构建文件夹
        webpack-dev-server
        作用: 简单的web服务器, 能够实时重新加载 注意在目标文件夹中找不到编译后的文件
        webpack-dev-middleware
    devtool
        inline-source-map, 开启source map功能, 将编译后的代码映射回原始源代码
    mode
        development, production
    resolve 解析模块规则
        alias, 模块路径别名
    devServer,
        contentBase
        port:5000
        host
        open
        hot, true表示开启HMR
        proxy, 服务器代理, 解决开发环境下的跨越问题
        eg.
            proxy:{
                //一旦5000接受到/api/xxx的请求, 就自动转发到3000
                '/api':{
                    target: 'http://localhost:3000'
                }
            }
        服务启动以后, 可以在命令行中通过ctrl+c来终止服务
优化
    development
        构建速度
            HMR, 一个模块发生变化, 只重新打包这一个文件, 而非重新打包所有
                样式文件, style-loader内部实现了
                js文件, 默认不能使用HMR功能
                    使用js代码开启
                        module.hot
                html文件, 不需要用
        代码调试
            source-map
    production
        构建速度
            oneof, 
            babel缓存,
            externals, 拒绝第三方的包被打包进bundle中
        运行性能
            文件缓存(hash/chunkhash/contenthash), 主要操作的是output中的filename的值
            tree shaking, 去除无用的代码来减少bundle文件的体积
                前提: es6 module, mode:production
                使用:在package.json中配置sideEffects
            code split, 把一个体积较大的bundle分割为几个小的bundle
            懒加载(延迟加载)/预加载
            
    
