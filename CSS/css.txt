css布局优缺点：
  优点：1、有利于seo 2、内容和表现分离，易维护 3、和table布局相比，页面比较小，加载速度快
  缺点：存在浏览器兼容问题

1、块级元素(block-level)：在正常流中，会在其生成的元素框之前和之后生成“换行”。比较常见的块级元素：p div li
   行内元素(inline-level)：在一个文本行中生成元素框，不会打断这行文本
2、css必须放在head元素中，和title元素平级，这样才会起作用。外部样式表link 、嵌套样式表style 、行内样式表

一、选择器

1  css规则的结构: h1       {color:red;background:yellow;}
                 选择器    声明块
    1.1 选择器种类:元素选择器,类选择器,ID选择器等
    1.2 声明块中包括一个或多个声明,每个声明则是一个{属性:值(如果有多个值,一般用空格隔开)}对,每个声明之间用;隔开
    
2  元素选择器:即css规则中的选择器是html元素,如:span{color:blue;}
    2.1 选择器分组:即css规则中的选择器有多个html元素,他们之间用,隔开,这样右边的规则将影响选择器中的所有元素,如:span,h2{color:blue;}
    2.2 通配选择器:*{color:yellow},这个选择器可以匹配任意元素,因此相当于文档中所有元素组成的分组选择器

3  类选择器:即css规则中的选择器是.class名,区分大小写,如:.name{color:red;}
    3.1 多类选择器:如.warning.footer{color:red;}, 意义是匹配class属性值中同时包含warning和footer的元素(2个class值用空格隔开)
    3.2 组合选择器:即css规则中的选择器由元素选择器和类选择器组合,如:p.name{color:red;},意义是匹配class属性值为name的所有p元素

4  ID选择器:即css规则中的选择器是#id名,区分大小写,如:#txtName{color:green;} 

5  属性选择器：即css规则中的选择器是元素属性或元素属性值
               (1)
7、后代选择器： p span {color:blue;}意义是匹配包含在p元素中的所有span元素，即从p的所有后代中匹配
                                    其中选择器从左至右是父子关系，之间用空格隔开
   子选择器：   p >span{color:blue;}意义是匹配包含在p元素的直接子元素中的所有span元素，即从p的直接子后代中匹配
   html文档结构
8、伪类选择器：2个只用于超链接的静态伪类： a:link { color:blue}未访问过的链接 a:visited{ color:red;}已访问过的链接。注意：：前后不能有空格
               3个可以用于任何元素的动态伪类：:focus{}获得输入焦点的元素， :hover{}被鼠标停留的元素， :active{}被激活的元素
			   伪类的顺序很重要：一般是a:link a:visited a:focus a:hover a:active
			   另一个静态伪类：第一个子元素 p:first-child{color:red;}意义是匹配是某元素的第一个子元素的所有p元素
9、伪元素选择器：4个伪元素：first-letter 设置一个块级元素的首字母样式  例子：p:first-letter{color:red;}
                            first-line   设置第一行的样式              例子：p:first-line{color:blue;}
				            before       在一个元素前插入生成内容      例子：h2:before{content:"||";color:red;}在h2前加一个红色的||
				            after        在一个元素后插入生成内容                              

  二、层叠
1、选择器的权重：主要用来解决当一个元素被应用了多种样式时的冲突问题。那个选择器的权重大就用那个
                 *                            加  0,0,0,0
				 id值                         加  0,1,0,0
				 类属性值，属性选择或伪类     加  0,0,1,0
				 元素，伪元素                 加  0,0,0,1
				 内联样式表                   加  1,0,0,0
2、样式继承：指后代元素自动继承祖先元素的样式规则，继承的样式的选择器没有权重（比*的0权重还小）
3、层叠：就是在对一个元素应用多个css规则发生冲突时，按一定规则（这就是层叠）对这些css规则进行排序，然后选择最优先的应用于这个元素。
         层叠规则：1、有！important的最优先
		           2、按选择器权重排序
				   3、按出现的先后顺序排序(后>先)   嵌套样式>外部样式
  三、单位
1、长度、颜色、时间
  四、属性
1、字体
   font-family：字体系列，有5中通用类型serif sans-serif monospace cursive fantasy   
                例子： p{font-family:KaiTi,YouYuan,'Times New Roman',serif;}
				默认显示第一个字体，如果没有会继续找下一个，每个字体用,隔开；字体名中带空格的要用''隔开
   font-weight：字体加粗，值：normal(默认值),bold,bolder,lighter,100-900        例子：p{font-weight:bold;}等效于p{font-weight:700;}
   font-size：字体大小，值：xx-small,x-small,small,medium(默认值),large,x-large,xx-large,smaller,larger,length,percentage
              line-height:行高，是文本属性，用/和size隔开，用作对字体大小的补充
   font-style：字体风格,值：italic(斜体),oblique(倾斜，竖直的偏移),nomal(竖直)
   font-varient:字体变形,值：small-caps,normal
   font:字体的综合属性，font:font-style|font-varient|font-weight|font-size|font-family
                        前3个属性的顺序随便写而且可选(如果某个属性值是normal可以省略)，但后2个即size和family的顺序不可以改变,而且在font属性中必须有这2个值
						例子：p{font:900 small-caps italic xx-large/16px YouYuan;}
						      h{font:italic bold normal 30px KaiTi,YouYuan;} 等效于h{font-family:KaiTi,YouYuan;font-weight:bold;font-size:30px;font-style:italic;font-varient:normal}

2、文本
   元素内第一行文本缩进
   text-indent：值：length，percentage  只应用于块级元素
   元素内文本水平对齐
   text-aligh：值：left，right，center，justify(两端对齐)  只应用于块级元素
   元素内文本垂直对齐
   vertical-align：值：baseline(默认值),sub,super,top,text-top,middle,bottom,text-bottom,length,percentage
                       只应用于行内元素和表单元格
   line-height：行高 值：length,percentage(相对于元素的字体大小) number normal(默认值) 可以用于所有元素 (行高-[font-size值])/2=行间距，因此如果需要子元素在包含块中垂直居中，可以设置包含块的行高=其height。
   word-spacing：字间隔 值：length，normal(默认值) 可以用于所有元素
   letter-spacing：字母间隔 值：length，normal(默认值) 可以用于所有元素
   元素内文本转换
   text-transform：文本大小写 值：uppercase,lowercase,capitalize(每个单词首字母大写),none(默认值) 可以用于所有元素
   元素内文本装饰
   text-decoration：none(默认值)，underline,overline,line-through 可以用于所有元素
   处理空白符
   white-space：值：normal(默认值，将多个空格合并为一个，换行也转换为空格)，nowrap(防止换行),pre(不忽略空白符)
   direction：文本方向  值：ltr rtl normal
3、颜色和背景
   color：前景色 值：<color>   可以用于所有元素 注意：当元素的有边框但没有设置边框颜色的情况下，边框的颜色就是color
   背景：即内边距边界包围的部分
   background-color：背景色 值：<color>,transparent(默认值，透明)  可以用于所有元素  不能继承的原因：如果一个元素没有
                     设置背景，那么背景就应该是透明的，这样才可以透过其看到其祖先的背景。
   background-image：背景图片 值：url(),none(默认值) 可以用于所有元素。注意：使用背景图片的同时最好再指定一个背景色，这
                     样一旦图片出现问题，就会由背景色取代图片
   background-repeat：背景图片在某一方向上重复 值：repeat(默认值) repeat-x repeat-y no-repeat
   background-position：图片在背景中的位置 值： percentage length 关键字值top right bottom left center，一般成对出现
                        1、当值是关键字时，比如.div1{background-position:top right;}表示使背景图像放在元素内边距区的右上角
						2、当值是百分值时，
						3、当值是长度值时，比如.div1{background-position:20px 25px;}表示背景图像的左上角从元素内边距区左上角的偏移
 4、光标
    cursor：光标样式  值： pointer小手  default箭头、..等等
 5、元素的不透明度
    opacity：值：从0.0(完全透明)到1.0(完全不透明)
			例子：#img1{opacity:0.6;
			filter:alpha(opacity=60);//for ie}


  五、 视觉格式化
1、元素框：css假定每一个元素都会生成一个矩形框，这个矩形框中心有一个内容区，内容区周围有可选的内边距、边框、外边距。
2、css盒子模型(box model)：见书签中的《CSS 框模型概述》。最中间是内容区，可以想象成盒子里放的东西，css中的width和height指的就是内容区的宽和高；
                           然后往外是padding，可以想象成保护东西的泡沫，内边距包围的区域呈现了元素的背景(background-color)；
						   然后往外是border，可以想象成盒子本身；
						   最外层是margin，可以想象成盒子和其他盒子之间的空间；
						   注意：增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸，进而增加包含块内容区的尺寸。
3、包含块：由最近的块级祖先框、表单元格或行内块祖先框的内容边界构成。每个元素都相对于其包含块摆放，包含块是一个元素布局的"上下文"。
4、正常流：西方语言文本从左至右、从上到下显示
5、块级元素水平格式化：正常流中块级元素的元素框的水平部分总和(7个属性值的和)就等于父元素的width
               margin-left:值可以为auto，也可以为负值
			   border-left:
			   padding-left:
			   width: 值可以为auto
			   padding-right:
			   border-right:
			   margin-right:
			   让子元素在父元素中水平居中的方法：margin-left和margin-right都设为auto，然后width设固定值
6、块级元素垂直格式化：正常流中块级元素的元素框的垂直部分总和(7个属性值的和)就等于父元素的height
               margin-top:值可以为auto，也可以为负值
			   border-top:默认值为0(如果没有设置border-style)
			   padding-top:默认值为0
			   height:值可以为auto
			   padding-bottom:
			   border-bottom:
			   margin-bottom:
			   合并垂直外边距：例子li{margin-top:10px;margin-bottom:15px}，但实际每个列表项之间的距离是15px,
			                   而不是25px，这就是相邻外边距会沿纵轴合并，大的合并小的。
7、行内元素：
               匿名文本：未包含在行内元素中的字符串。例子：<p>I am <em>very</em>happy</p> I am happy都是匿名文本
			   em框：在字体中定义，也叫字符框。font-size的值确定了em框的高度
			   内容区：各个em框串在一起组成，因此font-size的值决定了内容区的高度
			   行间距：是font-size和line-height之差。
			   行内框：通过向内容区增加行间距，就是把行间距一份为2，分别添加到内容区的顶部和底部
8、改变元素显示：属性display，影响元素如何显示。值：none,inline,block,inline-block,list-item,run-in
                 1、将一个无序列表中的项变成inline的效果
				 2、将几个a元素变成block的效果
				 3、将一个块元素的display改为inline，那么他的width等块级元素的属性会被忽略；但将它的display
				    改为inline-block时，width等块级元素的属性还可以用
				 4、run-in：例子：<h3 style="display:run-in;">这个是h3标题</h3><p>后面的是一个段落</p> ，这样h3
				                  会变成其后面块级元素内的行内框。只有当run-in后面是一个块级框时才有用
    六、内边距、边框和外边距
1、width和height：  这两个属性不能应用于行内非替换元素。可以用于块级元素和替换元素。
	                值：auto(默认值)、length、percentage（相对于包含块的值）
2、margin：可以用于所有元素
                    值：auto(可以水平居中)、length、percentage，默认值未定义(根据浏览器的不同而不同)
	                例子：div{margin:3px 2em 3px 2px;}，这4个值分别对应top right bottom left，单位可以不同
					div{margin:1px;}，如果只有一个值，将作用于全部4个边
					div{margin:2px 1px;}，如果只有2个值，top/bottom 2px；right/left 1px
					div{margin:1px 2px 3px;}，如果只有3个值，top 1px，right 2px，bottom 3px，left=right=2px
					当值是百分比时，是相对于包含块的width值，而不是height值
					负margin和margin合并
					margin和行内元素
					属性margin,margin-top,margin-right,margin-bottom,margin-left
3、border：可以用于所有元素
					样式：border-style：值，none，hidden，dotted，dashed,solid,double,groove,ridge,inset,ouset
						  border-top-style,border-right-style,border-bottom-style,border-left-style
						  注意当border-style值为none时，边框不存在，因此这时设置的width和color都不起作用的。
					粗细：border-width：值，thin,medium,thick,length
						  border-top-width,border-right-width,border-bottom-width,border-left-width
					颜色：border-color：值，颜色值，transparent（透明）
						  border-top-color,border-right-color,border-bottom-color,border-left-color
					属性border,border-top,border-right,border-bottom,border-left：width style color，顺序随意
4、padding：可以用于所有元素
                    值：length,percentage(相对于包含块的width值)
					属性padding,padding-top,padding-right,padding-bottom,padding-left

	  七、布局方案：浮动和定位
1、float：浮动 值：left，right，none 可以用于所有元素。最常见的用途可以使2个块元素横向并列摆放
2、浮动规则：
            1>浮动元素会生成一个块级框，不管这个元素是什么
			2>浮动元素的左(右)外边界不能超过包含块的左(右)内边界，换句话说不管怎么浮动都不可能逃出包含块的内容区
			3>浮动元素的左(右)外边界必须是包含块中之前出现的浮动元素的右(左)外边界，除非后出现的浮动元素的
			  顶端在先出现的浮动元素的底端下面。这条规则可以避免浮动元素彼此覆盖。
			4>左浮动元素的右外边界不会在其右边右浮动元素的左外边界的右边。这条规则可以避免浮动元素相互重叠。
			5>浮动元素的顶端不能比其包含块的内顶端更高，如果一个浮动元素在2个合并外边距之间，放置这个浮动
			  元素时就像在2个元素之间有一个块级父元素。
			6>后出现的浮动元素的顶端不能比之前出现的浮动元素或块级元素的顶端更高
			7>如果一个浮动元素之前有另一个元素，那么浮动元素的顶端不能比包含该元素的生成框的行框的顶端高
			8>左浮动元素的左边有另一浮动元素，前者的右外边界不能在包含块的右外边界的右边
			9>浮动元素必须尽可能高的放置，即在满足其他约束条件的前提下，浮动得尽可能高
		   10>左(右)浮动元素必须向左(右)尽可能远
3、通常将浮动元素的父元素设置为浮动元素，就可以把浮动元素包含在父元素中
4、clear：清除浮动 值：left,right,both,none,只应用于块级元素 
5、定位原理：利用定位，可以准确的定义元素框相对于其正常位置应该出现在那里，或相对于父元素、另一个元素、浏览器窗口
            1> position：定位类型 值：static(默认值)，relative，absolute，fixed  可以用于所有元素
               3种定位的区别就是相对于谁来定位，这也是定位的主要问题
            2>定位元素的包含块：
                   1、对于一个非根元素，如果position值是relative或static，包含块就是最近的祖先元素
				   2、对于一个非根元素，如果position值是absolute，包含块就是最近的position值不是static的祖先元素
            3>top，right，bottom，left：偏移属性，值：length,percentage,auto,可以用于position不是static的元素
				   top：表示定位元素上外边距距离包含块顶端多远
				   right：表示定位元素右外边距距离包含块右边多远
				   bottom：表示定位元素下外边距距离包含块底部边多远
				   left：表示定位元素左外边距距离包含块左边多远
            4>绝对定位position:absolute
				   1、元素绝对定位时，元素框会从文档流中完全删除。然后相对于其包含块[最近的position值不是static的祖先元素]定位，其边界根据偏移属性(top right等)放置，元素在正常
					文档流中的空间会被删除。定位元素不会流入其他元素的内容，反之亦然。通常将包含块的position设置为relative而且没有偏移。
				   2、可以利用绝对定位使元素在包含块中垂直居中：比如：.element{position:absolute;top:0;bottom:0;height:50px;margin:auto 0;}
			5>z-index：改变元素相互覆盖的顺序  值：integer auto；z-index值越大，这个元素离读者越近。这个属性是解决多个定位元素在一个位置上时，那个在上，那个在下的问题
			6>固定定位position:fixed：固定元素的包含块是视窗，这是和绝对定位的唯一区别。
			7>相对定位position:relative：即相对于其本身的位置进行偏移，被定位的元素原来的位置会变成空白
6、定位总结：1>参照物：相对定位参照物是本身，绝对定位是包含块，固定定位是浏览器视窗 2>后果：相对定位后，元素原来的位置保留；绝对定位后，原来的位置被占
7、overflow：溢出 值：visible(默认值) hidden scroll auto  用于块级元素和替换元素
              假定一个元素固定大小，但内容在元素中放不下，这时可以用overflow来控制这种情况。
			  1、visible表示内容在元素框之外也可见，这会导致内容超出元素框，但元素框的大小不变
			  2、scroll表示内容在元素框的边界处剪裁，超出的部分需要拖动滚动条才能看到
			  3、hidden表示内容在元素框的边界处剪裁，超出的部分用户看不到
			  4、overflow-x overflow-y
8、clip：剪裁  值：rect(top right bottom left)  只应用于绝对定位元素
9、visibility：可见性 值：visible(默认值) hidden collapse  用于所有元素
    
	八、表布局<不是用表布局，而是css中table本身如何布局>
1、caption-side：表标题元素caption的位置，值：top bottom，应用于display值为table-caption的元素。caption相当于直接放在表前(或表后)的块级元素
2、border-collapse：表单元格边框模式，值：collapse合并模式 separate分隔模式，应用于display值为table的元素
3、border-spacing：单元格之间的间隔，值：length(水平间隔) length(垂直间隔)，应用于display值为table的元素，并且border-collapse:separate时才有效
4、表的宽度有2种布局：固定宽度和自动布局，不管那种布局，表的高度都是自动计算
   table-layout：表宽度的布局，值：auto(默认) fixed应用于display值为table的元素。这2种布局对同一个表可能有不同的结果，但二者之间
   最大的区别就是速度，fixed布局比auto布局要快。

	九、列表和生成内容
1、list-style-type：列表项的标志类型 只应用于display值为list-item的元素
                    值：disc         circle      square     decimal    decimal-leading-zero  none等
					    实心圆       空心圆      方块       1,2,3      01,02,03             无标志
2、list-style-image：列表项图片标志  只应用于display值为list-item的元素
					值：url none
3、list-style-position：列表项标志位置 只应用于display值为list-item的元素
                    值：outside(默认值) inside
4、list-style：值：[list-style-type || list-style-image || list-style-position]  3个属性出现顺序任意
5、content:指定内容 值：normal string uri  只用于:before 和 :after 伪元素

       







                             

						